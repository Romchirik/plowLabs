import ds/tree;

export {
    //main sector
    Program(defenitions: [VarDefinition], body: Body);
    Body ::= Sqn, End;

    //operators stuff
    Sqn(rhs: Command, lhs: Body);
    End(bhs: Command);

    //commands stuff
    Command ::= Assign, App, Upd, Iterate, Test, Sel;

    Iterate(body: Body);
    Test(expr: Relation);
    Sel(rhs: Body, lhs: Body);
    Assign(var: Var, val: IntExpr);
    App(target: Var, idx: IntExpr);
    Upd(target: Var, idx: IntExpr, newval: IntExpr);


    //int expressions
    IntExpr ::= Sum, Sub, Mul, Div, Mod, Int, Var, App;
    Sum(lhs: IntExpr, rhs: IntExpr);   
    Sub(lhs: IntExpr, rhs: IntExpr);  
    Mul(lhs: IntExpr, rhs: IntExpr);  
    Div(lhs: IntExpr, rhs: IntExpr);  
    Mod(lhs: IntExpr, rhs: IntExpr);  
    
    //boolean expressions
    BoolExpr ::= And, Or, Xor, Imp, Var, Bool;
    And(lhs: BoolExpr, rhs: BoolExpr);
    Or(lhs: BoolExpr, rhs: BoolExpr);
    Xor(lhs: BoolExpr, rhs: BoolExpr);
    Imp(lhs: BoolExpr, rhs: BoolExpr);
    
    //relations 
    Relation ::= Eq, LessOrEq, MoreOrEq, Less, More;
    Eq(lhs: IntExpr, rhs: IntExpr);
    LessOrEq(lhs: IntExpr, rhs: IntExpr);
    MoreOrEq(lhs: IntExpr, rhs: IntExpr);
    Less(lhs: IntExpr, rhs: IntExpr);
    More(lhs: IntExpr, rhs: IntExpr);

    //variables stuff
    VarDefinition(var: Var, type: Type);
    Var(name: string);

    //Types
    Type ::= IntType, BoolType, ArrayType;

    IntType();
    BoolType();
    ArrayType(type: Type);

    Int(value: int);
    Bool(value: bool);
    Array(value: [Type]);
}